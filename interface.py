import flet as ft
import json
from typing import List, Dict
import requests
import random
from datetime import datetime, timedelta

class UserProfile:
    def __init__(self, username="–ì–æ—Å—Ç—å"):
        self.username = username
        self.saved_routes = []
        self.favorite_places = []
        self.join_date = datetime.now()
        self.preferences = {
            "categories": [],
            "price_range": "$$",
            "max_distance": 10
        }
    
    def to_dict(self):
        return {
            "username": self.username,
            "saved_routes": self.saved_routes,
            "favorite_places": self.favorite_places,
            "join_date": self.join_date.isoformat(),
            "preferences": self.preferences
        }
    
    @classmethod
    def from_dict(cls, data):
        profile = cls(data["username"])
        profile.saved_routes = data["saved_routes"]
        profile.favorite_places = data["favorite_places"]
        profile.join_date = datetime.fromisoformat(data["join_date"])
        profile.preferences = data["preferences"]
        return profile

class RoutePlannerApp:
    def __init__(self):
        self.places = []  # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç
        self.current_user = UserProfile()
        self.categories = {
            "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏": [],
            "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã": ["—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–∫–∞—Ñ–µ", "–±–∞—Ä", "–∫–æ—Ñ–µ–π–Ω—è"],
            "–ö—É–ª—å—Ç—É—Ä–∞": ["—Ç–µ–∞—Ç—Ä", "–∫–∏–Ω–æ", "–º—É–∑–µ–π", "–≥–∞–ª–µ—Ä–µ—è", "–±–∏–±–ª–∏–æ—Ç–µ–∫–∞"],
            "–ü–∞—Ä–∫–∏": ["–ø–∞—Ä–∫", "—Å–∫–≤–µ—Ä", "—Å–∞–¥", "–Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è"],
            "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["–∫–ª—É–±", "–±–∏–ª—å—è—Ä–¥", "–±–æ—É–ª–∏–Ω–≥", "–∞–∫–≤–∞–ø–∞—Ä–∫"],
            "–ú–∞–≥–∞–∑–∏–Ω—ã": ["—Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä", "–º–∞–≥–∞–∑–∏–Ω", "–±—É—Ç–∏–∫", "—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç"],
            "–°–ø–æ—Ä—Ç": ["—Å—Ç–∞–¥–∏–æ–Ω", "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å", "–±–∞—Å—Å–µ–π–Ω", "—Ñ–∏—Ç–Ω–µ—Å"]
        }
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.sample_places = [
            # –†–µ—Å—Ç–æ—Ä–∞–Ω—ã
            {"name": "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω '–ü–∞—Å—Ç–∞'", "category": "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", "address": "—É–ª. –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è, 15", "rating": 4.7, "price": "$$$", "hours": "10:00-23:00"},
            {"name": "–ö–æ—Ñ–µ–π–Ω—è '–£—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—Ñ–µ'", "category": "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", "address": "–ø—Ä. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π, 42", "rating": 4.5, "price": "$", "hours": "07:00-22:00"},
            {"name": "–°—É—à–∏-–±–∞—Ä '–¢–æ–∫–∏–æ'", "category": "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", "address": "—É–ª. –í–æ—Å—Ç–æ—á–Ω–∞—è, 8", "rating": 4.3, "price": "$$", "hours": "11:00-23:00"},
            {"name": "–ë–∞—Ä '–ö—Ä–∞—Å–Ω–æ–µ –≤–∏–Ω–æ'", "category": "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã", "address": "–ø–ª. –í–µ—á–µ—Ä–Ω—è—è, 3", "rating": 4.6, "price": "$$$", "hours": "18:00-02:00"},
            
            # –ö—É–ª—å—Ç—É—Ä–∞
            {"name": "–¢–µ–∞—Ç—Ä –¥—Ä–∞–º—ã", "category": "–ö—É–ª—å—Ç—É—Ä–∞", "address": "–ø–ª. –¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è, 1", "rating": 4.8, "price": "$$", "hours": "10:00-20:00"},
            {"name": "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∏–∫'", "category": "–ö—É–ª—å—Ç—É—Ä–∞", "address": "–ø—Ä. –ö–∏–Ω–æ, 10", "rating": 4.2, "price": "$$", "hours": "09:00-00:00"},
            {"name": "–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º—É–∑–µ–π", "category": "–ö—É–ª—å—Ç—É—Ä–∞", "address": "—É–ª. –ú—É–∑–µ–π–Ω–∞—è, 5", "rating": 4.9, "price": "$", "hours": "11:00-19:00"},
            {"name": "–ì–∞–ª–µ—Ä–µ—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞", "category": "–ö—É–ª—å—Ç—É—Ä–∞", "address": "–ø–µ—Ä. –ò—Å–∫—É—Å—Å—Ç–≤, 12", "rating": 4.4, "price": "$$", "hours": "12:00-20:00"},
            
            # –ü–∞—Ä–∫–∏
            {"name": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫", "category": "–ü–∞—Ä–∫–∏", "address": "—É–ª. –ü–∞—Ä–∫–æ–≤–∞—è, 1", "rating": 4.6, "price": "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ", "hours": "–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ"},
            {"name": "–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∏–π —Å–∞–¥", "category": "–ü–∞—Ä–∫–∏", "address": "—É–ª. –†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–∞—è, 25", "rating": 4.7, "price": "$", "hours": "08:00-20:00"},
            {"name": "–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è —Ä–µ–∫–∏", "category": "–ü–∞—Ä–∫–∏", "address": "–Ω–∞–±. –†–µ—á–Ω–∞—è, 7", "rating": 4.5, "price": "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ", "hours": "–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ"},
            {"name": "–°–∫–≤–µ—Ä –ü–æ–±–µ–¥—ã", "category": "–ü–∞—Ä–∫–∏", "address": "–ø–ª. –ü–æ–±–µ–¥—ã, 2", "rating": 4.3, "price": "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ", "hours": "–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ"},
            
            # –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
            {"name": "–ë–æ—É–ª–∏–Ω–≥-–∫–ª—É–± '–°—Ç—Ä–∞–π–∫'", "category": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "address": "—É–ª. –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è, 8", "rating": 4.1, "price": "$$", "hours": "12:00-00:00"},
            {"name": "–ù–æ—á–Ω–æ–π –∫–ª—É–± '–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞'", "category": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "address": "–ø—Ä. –ù–æ—á–Ω–æ–π, 33", "rating": 4.4, "price": "$$$", "hours": "22:00-06:00"},
            {"name": "–ê–∫–≤–∞–ø–∞—Ä–∫ '–í–æ–ª–Ω–∞'", "category": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "address": "—É–ª. –í–æ–¥–Ω–∞—è, 18", "rating": 4.8, "price": "$$$", "hours": "10:00-22:00"},
            {"name": "–ö–∞—Ä–∞–æ–∫–µ-–±–∞—Ä '–ì–æ–ª–æ—Å'", "category": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "address": "—É–ª. –ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è, 11", "rating": 4.2, "price": "$$", "hours": "16:00-02:00"},
            
            # –ú–∞–≥–∞–∑–∏–Ω—ã
            {"name": "–¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä '–ì–ª–æ–±—É—Å'", "category": "–ú–∞–≥–∞–∑–∏–Ω—ã", "address": "—É–ª. –¢–æ—Ä–≥–æ–≤–∞—è, 15", "rating": 4.0, "price": "$$", "hours": "09:00-22:00"},
            {"name": "–ë—É—Ç–∏–∫ '–ú–æ–¥–∞'", "category": "–ú–∞–≥–∞–∑–∏–Ω—ã", "address": "—É–ª. –°—Ç–∏–ª—å–Ω–∞—è, 9", "rating": 4.3, "price": "$$$", "hours": "10:00-21:00"},
            {"name": "–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç '–ü—Ä–æ–¥—É–∫—Ç—ã'", "category": "–ú–∞–≥–∞–∑–∏–Ω—ã", "address": "–ø—Ä. –ü—Ä–æ–¥–æ–≤–æ–ª—å—Å—Ç–≤–µ–Ω–Ω—ã–π, 20", "rating": 4.1, "price": "$", "hours": "08:00-23:00"},
            {"name": "–ö–Ω–∏–∂–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω '–ß–∏—Ç–∞–π'", "category": "–ú–∞–≥–∞–∑–∏–Ω—ã", "address": "—É–ª. –ö–Ω–∏–∂–Ω–∞—è, 6", "rating": 4.6, "price": "$$", "hours": "09:00-20:00"},
            
            # –°–ø–æ—Ä—Ç
            {"name": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å '–û–ª–∏–º–ø'", "category": "–°–ø–æ—Ä—Ç", "address": "—É–ª. –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è, 25", "rating": 4.7, "price": "$$", "hours": "06:00-23:00"},
            {"name": "–ë–∞—Å—Å–µ–π–Ω '–í–æ–ª–Ω–∞'", "category": "–°–ø–æ—Ä—Ç", "address": "—É–ª. –í–æ–¥–Ω–∞—è, 12", "rating": 4.5, "price": "$$", "hours": "07:00-22:00"},
            {"name": "–°—Ç–∞–¥–∏–æ–Ω '–Æ–Ω–æ—Å—Ç—å'", "category": "–°–ø–æ—Ä—Ç", "address": "–ø—Ä. –°—Ç–∞–¥–∏–æ–Ω–Ω—ã–π, 5", "rating": 4.4, "price": "$", "hours": "06:00-22:00"},
            {"name": "–§–∏—Ç–Ω–µ—Å-–∫–ª—É–± '–≠–Ω–µ—Ä–≥–∏—è'", "category": "–°–ø–æ—Ä—Ç", "address": "—É–ª. –ó–¥–æ—Ä–æ–≤–∞—è, 14", "rating": 4.3, "price": "$$$", "hours": "05:00-00:00"}
        ]
        
    def main(self, page: ft.Page):
        self.page = page
        page.title = "üöó –ú–∞—Ä—à—Ä—É—Ç—ã –ø–æ –≥–æ—Ä–æ–¥—É - –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"
        page.theme_mode = ft.ThemeMode.LIGHT
        page.padding = 20
        page.scroll = ft.ScrollMode.ADAPTIVE
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è
        self.profile_dialog = ft.AlertDialog(
            modal=True,
            title=ft.Text("üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
            content=ft.Column([], tight=True, scroll=ft.ScrollMode.ADAPTIVE),
            actions=[
                ft.TextButton("–ó–∞–∫—Ä—ã—Ç—å", on_click=self.close_profile_dialog),
            ],
            actions_alignment=ft.MainAxisAlignment.END,
        )
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.search_field = ft.TextField(
            label="üîç –ü–æ–∏—Å–∫ –º–µ—Å—Ç...",
            hint_text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞–¥—Ä–µ—Å",
            expand=True,
            on_submit=self.search_places
        )
        
        self.category_dropdown = ft.Dropdown(
            label="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è",
            options=[ft.dropdown.Option(cat) for cat in self.categories.keys()],
            on_change=self.filter_by_category,
            expand=True,
            value="–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        )
        
        self.places_list = ft.ListView(expand=True, spacing=10)
        self.selected_places_list = ft.Column(expand=True, spacing=5)
        self.route_info = ft.Column()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats_text = ft.Text("", size=12, color=ft.colors.GREY_600)
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        page.add(
            ft.Row([
                ft.Text("üó∫Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø–æ –≥–æ—Ä–æ–¥—É", 
                       size=24, weight=ft.FontWeight.BOLD, expand=True),
                ft.IconButton(
                    icon=ft.icons.INFO,
                    on_click=self.show_info
                ),
                ft.IconButton(
                    icon=ft.icons.PERSON,
                    tooltip="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    on_click=self.show_profile_dialog
                )
            ]),
            
            ft.Row([
                self.search_field,
                self.category_dropdown,
                ft.ElevatedButton("üîç –ü–æ–∏—Å–∫", on_click=self.search_places),
                ft.ElevatedButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç", on_click=self.random_route)
            ]),
            
            self.stats_text,
            
            ft.Row([
                # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
                ft.Container(
                    content=ft.Column([
                        ft.Row([
                            ft.Text("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:", size=16, weight=ft.FontWeight.BOLD),
                            ft.Text("(–∫–ª–∏–∫–Ω–∏—Ç–µ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–∞—Ä—à—Ä—É—Ç)", size=12, color=ft.colors.GREY)
                        ]),
                        ft.Container(
                            content=self.places_list,
                            expand=True
                        )
                    ]),
                    expand=2,
                    padding=10,
                    border=ft.border.all(1, ft.colors.GREY_300),
                    border_radius=10
                ),
                
                # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –∏ –º–∞—Ä—à—Ä—É—Ç
                ft.Container(
                    content=ft.Column([
                        ft.Text("üìç –ú–∞—Ä—à—Ä—É—Ç:", size=16, weight=ft.FontWeight.BOLD),
                        ft.Container(
                            content=ft.Column(
                                controls=[self.selected_places_list],
                                scroll=ft.ScrollMode.ADAPTIVE
                            ),
                            height=300,
                            expand=True
                        ),
                        ft.Divider(),
                        self.route_info,
                        ft.Row([
                            ft.ElevatedButton(
                                "üöÄ –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", 
                                on_click=self.build_route,
                                icon=ft.icons.ROUTE,
                                style=ft.ButtonStyle(color=ft.colors.WHITE, bgcolor=ft.colors.GREEN)
                            ),
                            ft.ElevatedButton(
                                "üßπ –û—á–∏—Å—Ç–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç",
                                on_click=self.clear_route,
                                icon=ft.icons.CLEAR
                            ),
                            ft.ElevatedButton(
                                "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç",
                                on_click=self.save_route,
                                icon=ft.icons.SAVE
                            )
                        ])
                    ]),
                    expand=1,
                    padding=10,
                    border=ft.border.all(1, ft.colors.GREY_300),
                    border_radius=10
                )
            ], expand=True, height=500),
            
            # –ö–∞—Ä—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)
            ft.Container(
                content=ft.Column([
                    ft.Text("üó∫Ô∏è –ö–∞—Ä—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞", size=18, weight=ft.FontWeight.BOLD),
                    ft.Text("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞—Ä—Ç–∞ —Å –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–æ–º"),
                    ft.Container(
                        bgcolor=ft.colors.BLUE_50,
                        height=200,
                        border_radius=10,
                        alignment=ft.alignment.center,
                        content=ft.Column([
                            ft.Icon(ft.icons.MAP, size=48, color=ft.colors.BLUE_300),
                            ft.Text("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞", color=ft.colors.BLUE_300)
                        ], horizontal_alignment=ft.CrossAxisAlignment.CENTER)
                    )
                ]),
                padding=10
            )
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.load_sample_places()
        self.update_stats()
    
    def show_profile_dialog(self, e):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –ø—Ä–æ—Ñ–∏–ª—è"""
        self.update_profile_dialog_content()
        self.page.dialog = self.profile_dialog
        self.profile_dialog.open = True
        self.page.update()
    
    def close_profile_dialog(self, e):
        """–ó–∞–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –ø—Ä–æ—Ñ–∏–ª—è"""
        self.profile_dialog.open = False
        self.page.update()
    
    def update_profile_dialog_content(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = ft.Column([
            ft.Row([
                ft.Icon(ft.icons.PERSON, size=40, color=ft.colors.BLUE_500),
                ft.Column([
                    ft.Text(self.current_user.username, size=20, weight=ft.FontWeight.BOLD),
                    ft.Text(f"–£—á–∞—Å—Ç–Ω–∏–∫ —Å {self.current_user.join_date.strftime('%d.%m.%Y')}", 
                           size=12, color=ft.colors.GREY_600),
                ])
            ]),
            ft.Divider(),
        ])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_section = ft.Column([
            ft.Text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", size=16, weight=ft.FontWeight.BOLD),
            ft.Row([
                ft.Column([
                    ft.Text(str(len(self.current_user.saved_routes)), size=24, weight=ft.FontWeight.BOLD),
                    ft.Text("—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö\n–º–∞—Ä—à—Ä—É—Ç–æ–≤", size=12, text_align=ft.TextAlign.CENTER)
                ], expand=True, horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                ft.Column([
                    ft.Text(str(len(self.current_user.favorite_places)), size=24, weight=ft.FontWeight.BOLD),
                    ft.Text("–∏–∑–±—Ä–∞–Ω–Ω—ã—Ö\n–º–µ—Å—Ç", size=12, text_align=ft.TextAlign.CENTER)
                ], expand=True, horizontal_alignment=ft.CrossAxisAlignment.CENTER),
            ]),
            ft.Divider(),
        ])
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        saved_routes_section = ft.Column([
            ft.Text("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã", size=16, weight=ft.FontWeight.BOLD),
        ])
        
        if self.current_user.saved_routes:
            for i, route in enumerate(self.current_user.saved_routes[-3:]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                route_card = ft.Card(
                    content=ft.Container(
                        content=ft.Column([
                            ft.Text(route.get("name", f"–ú–∞—Ä—à—Ä—É—Ç {i+1}"), weight=ft.FontWeight.BOLD),
                            ft.Text(f"{len(route.get('places', []))} –º–µ—Å—Ç", size=12),
                            ft.Text(route.get("created_at", ""), size=10, color=ft.colors.GREY),
                        ]),
                        padding=10,
                        on_click=lambda e, r=route: self.load_saved_route(r)
                    )
                )
                saved_routes_section.controls.append(route_card)
        else:
            saved_routes_section.controls.append(
                ft.Text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤", size=12, color=ft.colors.GREY)
            )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        settings_section = ft.Column([
            ft.Divider(),
            ft.Text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", size=16, weight=ft.FontWeight.BOLD),
            ft.ElevatedButton(
                "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
                on_click=self.change_username,
                icon=ft.icons.EDIT
            ),
            ft.ElevatedButton(
                "‚≠ê –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è",
                on_click=self.show_preferences,
                icon=ft.icons.SETTINGS
            ),
        ])
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
        self.profile_dialog.content = ft.Column([
            user_info,
            stats_section,
            saved_routes_section,
            settings_section
        ], height=400, scroll=ft.ScrollMode.ADAPTIVE)
    
    def change_username(self, e):
        """–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        def save_username(e):
            if name_field.value.strip():
                self.current_user.username = name_field.value.strip()
                self.page.dialog.open = False
                self.update_profile_dialog_content()
                self.page.update()
                self.show_snackbar("‚úÖ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–æ")
        
        name_field = ft.TextField(
            label="–ù–æ–≤–æ–µ –∏–º—è",
            value=self.current_user.username,
            autofocus=True
        )
        
        username_dialog = ft.AlertDialog(
            title=ft.Text("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
            content=name_field,
            actions=[
                ft.TextButton("–û—Ç–º–µ–Ω–∞", on_click=lambda e: setattr(self.page.dialog, 'open', False)),
                ft.TextButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", on_click=save_username),
            ]
        )
        
        self.page.dialog = username_dialog
        username_dialog.open = True
        self.page.update()
    
    def show_preferences(self, e):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
        self.show_snackbar("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    
    def load_saved_route(self, route):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç"""
        self.clear_route(None)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        for place_data in route.get("places", []):
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–µ
            place = next((p for p in self.sample_places if p["name"] == place_data.get("name")), None)
            if place:
                self.add_to_route(place)
        
        self.profile_dialog.open = False
        self.page.update()
        self.show_snackbar(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç '{route.get('name', '')}' –∑–∞–≥—Ä—É–∂–µ–Ω")
    
    def load_sample_places(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–∞—Ö"""
        self.places_list.controls.clear()
        for place in self.sample_places:
            self.add_place_to_list(place)
        self.page.update()
    
    def add_place_to_list(self, place: Dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        icons = {
            "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã": ft.icons.RESTAURANT,
            "–ö—É–ª—å—Ç—É—Ä–∞": ft.icons.THEATER_COMEDY,
            "–ü–∞—Ä–∫–∏": ft.icons.PARK,
            "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ft.icons.ATTRACTIONS,
            "–ú–∞–≥–∞–∑–∏–Ω—ã": ft.icons.SHOPPING_BAG,
            "–°–ø–æ—Ä—Ç": ft.icons.SPORTS
        }
        
        icon = icons.get(place["category"], ft.icons.PLACE)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        is_favorite = any(fav["name"] == place["name"] for fav in self.current_user.favorite_places)
        favorite_icon = ft.icons.FAVORITE if is_favorite else ft.icons.FAVORITE_BORDER
        
        place_card = ft.Card(
            content=ft.Container(
                content=ft.Column([
                    ft.Row([
                        ft.Icon(icon, color=ft.colors.BLUE_500),
                        ft.Text(place["name"], weight=ft.FontWeight.BOLD, expand=True),
                        ft.IconButton(
                            icon=favorite_icon,
                            icon_color=ft.colors.RED if is_favorite else ft.colors.GREY,
                            icon_size=20,
                            on_click=lambda e, p=place: self.toggle_favorite(p)
                        ),
                        ft.Badge(
                            content=ft.Text(place["price"]),
                            bgcolor=ft.colors.GREEN_100 if place["price"] == "$" else 
                                   ft.colors.ORANGE_100 if place["price"] == "$$" else 
                                   ft.colors.RED_100
                        )
                    ]),
                    ft.Text(place["address"], size=12, color=ft.colors.GREY_600),
                    ft.Row([
                        ft.Text(f"‚≠ê {place['rating']}", size=12),
                        ft.Text(place["category"], size=12, color=ft.colors.BLUE_600),
                        ft.Text(f"üïí {place['hours']}", size=12, color=ft.colors.GREY),
                    ])
                ]),
                padding=10,
                on_click=lambda e, p=place: self.add_to_route(p)
            )
        )
        
        self.places_list.controls.append(place_card)
    
    def toggle_favorite(self, place: Dict):
        """–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
        if any(fav["name"] == place["name"] for fav in self.current_user.favorite_places):
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            self.current_user.favorite_places = [
                fav for fav in self.current_user.favorite_places 
                if fav["name"] != place["name"]
            ]
            self.show_snackbar(f"‚ùå {place['name']} —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
            self.current_user.favorite_places.append(place)
            self.show_snackbar(f"‚≠ê {place['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.load_sample_places()
        self.page.update()
    
    def add_to_route(self, place: Dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –≤ –º–∞—Ä—à—Ä—É—Ç"""
        if place not in self.places:
            self.places.append(place)
            
            place_item = ft.ListTile(
                leading=ft.Icon(ft.icons.LOCATION_ON),
                title=ft.Text(place["name"]),
                subtitle=ft.Text(place["address"]),
                trailing=ft.IconButton(
                    icon=ft.icons.DELETE,
                    on_click=lambda e, p=place: self.remove_from_route(p)
                )
            )
            
            self.selected_places_list.controls.append(place_item)
            self.update_stats()
            self.page.update()
            self.show_snackbar(f"‚úÖ {place['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞—Ä—à—Ä—É—Ç")
    
    def remove_from_route(self, place: Dict):
        """–£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞"""
        self.places.remove(place)
        self.selected_places_list.controls = [
            item for item in self.selected_places_list.controls 
            if hasattr(item, 'title') and item.title.value != place["name"]
        ]
        self.update_stats()
        self.page.update()
        self.show_snackbar(f"‚ùå {place['name']} —É–¥–∞–ª–µ–Ω –∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞")
    
    def search_places(self, e):
        """–ü–æ–∏—Å–∫ –º–µ—Å—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        query = self.search_field.value.lower().strip()
        category = self.category_dropdown.value
        
        self.places_list.controls.clear()
        
        filtered_places = self.sample_places
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
        if query:
            filtered_places = [
                p for p in filtered_places 
                if query in p["name"].lower() or 
                   query in p["address"].lower() or
                   query in p["category"].lower()
            ]
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category and category != "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏":
            filtered_places = [p for p in filtered_places if p["category"] == category]
        
        for place in filtered_places:
            self.add_place_to_list(place)
        
        self.update_stats()
        self.page.update()
        
        if not filtered_places:
            self.show_snackbar("üîç –ú–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
    
    def filter_by_category(self, e):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        self.search_places(e)
    
    def random_route(self, e):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞"""
        self.clear_route(e)
        
        # –í—ã–±–∏—Ä–∞–µ–º 3-5 —Å–ª—É—á–∞–π–Ω—ã—Ö –º–µ—Å—Ç
        num_places = random.randint(3, 5)
        random_places = random.sample(self.sample_places, num_places)
        
        for place in random_places:
            self.add_to_route(place)
        
        self.show_snackbar(f"üé≤ –°–æ–∑–¥–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –∏–∑ {num_places} –º–µ—Å—Ç")
    
    def build_route(self, e):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞"""
        if len(self.places) < 2:
            self.show_snackbar("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 2 –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞")
            return
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏
        total_time = len(self.places) * 15 + (len(self.places) - 1) * 10
        total_distance = len(self.places) * 2.5
        
        self.route_info.controls = [
            ft.Text("‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω!", color=ft.colors.GREEN, weight=ft.FontWeight.BOLD),
            ft.Text(f"üìç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫: {len(self.places)}"),
            ft.Text(f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {total_time} –º–∏–Ω"),
            ft.Text(f"üìè –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {total_distance:.1f} –∫–º"),
            ft.Text(f"üõ£Ô∏è –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫:", weight=ft.FontWeight.BOLD),
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø–æ—Å–µ—â–µ–Ω–∏—è
        for i, place in enumerate(self.places, 1):
            self.route_info.controls.append(
                ft.Text(f"{i}. {place['name']}", size=12)
            )
        
        self.show_snackbar(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ {len(self.places)} —Ç–æ—á–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω!")
        self.page.update()
    
    def clear_route(self, e):
        """–û—á–∏—Å—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞"""
        self.places.clear()
        self.selected_places_list.controls.clear()
        self.route_info.controls.clear()
        self.update_stats()
        self.page.update()
        self.show_snackbar("üßπ –ú–∞—Ä—à—Ä—É—Ç –æ—á–∏—â–µ–Ω")
    
    def save_route(self, e):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞"""
        if not self.places:
            self.show_snackbar("‚ùå –ù–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        route_data = {
            "name": f"–ú–∞—Ä—à—Ä—É—Ç –æ—Ç {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            "places": self.places.copy(),
            "created_at": datetime.now().strftime('%d.%m.%Y %H:%M')
        }
        
        self.current_user.saved_routes.append(route_data)
        self.show_snackbar("üíæ –ú–∞—Ä—à—Ä—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ!")
    
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total_places = len(self.sample_places)
        filtered_places = len(self.places_list.controls)
        selected_places = len(self.places)
        
        self.stats_text.value = f"üìä –í—Å–µ–≥–æ –º–µ—Å—Ç: {total_places} | –ù–∞–π–¥–µ–Ω–æ: {filtered_places} | –í –º–∞—Ä—à—Ä—É—Ç–µ: {selected_places}"
    
    def show_info(self, e):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
        self.show_snackbar("üó∫Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ v1.0 ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –º–µ—Å—Ç–∞ –≤ –º–∞—Ä—à—Ä—É—Ç!")
    
    def show_snackbar(self, message: str):
        """–ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.page.snack_bar = ft.SnackBar(
            content=ft.Text(message),
            action="OK",
            action_color=ft.colors.BLUE
        )
        self.page.snack_bar.open = True
        self.page.update()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main(page: ft.Page):
    app = RoutePlannerApp()
    app.main(page)

if __name__ == "__main__":
    ft.app(target=main)