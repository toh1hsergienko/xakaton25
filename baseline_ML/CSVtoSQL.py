import sqlite3
import csv
import os

def create_database():
    db_path = "rostov_places.db"
    if os.path.exists(db_path):
        os.remove(db_path)
        print("–£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö.")

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    cursor.execute("""
        CREATE TABLE attractions (
            id INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            lat REAL NOT NULL,
            lon REAL NOT NULL,
            category TEXT,
            website TEXT,
            opening_hours TEXT
        )
    """)

    cursor.execute("""
        CREATE TABLE restaurants (
            id INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            lat REAL NOT NULL,
            lon REAL NOT NULL,
            type TEXT,
            cuisine TEXT,
            price_level TEXT,
            opening_hours TEXT,
            website TEXT,
            addr TEXT
        )
    """)

    conn.commit()
    return conn

def clean_field(value):
    return value if value != "" else None

def import_attractions(conn):
    filename = "rostov_attractions.csv"
    if not os.path.exists(filename):
        print(f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    with open(filename, "r", encoding="utf-8-sig") as f:  # utf-8-sig ‚Äî —á—Ç–æ–±—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å BOM
        sample = f.read(200)
        f.seek(0)
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤ –Ω–∞—á–∞–ª–µ —Ü–∏—Ñ—Ä—ã ‚Äî —Ç–æ–≥–¥–∞, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        first_line = f.readline().strip()
        f.seek(0)

        print(f"üîç –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ {filename}: {first_line}")

        reader = csv.DictReader(f)
        expected_fields = {"id", "name", "lat", "lon", "category", "website", "opening_hours"}
        actual_fields = set(reader.fieldnames or [])
        if not expected_fields.issubset(actual_fields):
            print(f"‚ùå –û—à–∏–±–∫–∞: –≤ {filename} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω—É–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏.")
            print(f"–û–∂–∏–¥–∞–ª–∏—Å—å: {expected_fields}")
            print(f"–ü–æ–ª—É—á–µ–Ω—ã: {actual_fields}")
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ {filename}")

        cursor = conn.cursor()
        for row in reader:
            cursor.execute("""
                INSERT INTO attractions (
                    id, name, lat, lon, category, website, opening_hours
                ) VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                int(row["id"]),
                row["name"],
                float(row["lat"]),
                float(row["lon"]),
                clean_field(row["category"]),
                clean_field(row["website"]),
                clean_field(row["opening_hours"])
            ))
    conn.commit()
    print("‚úÖ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.")

def import_restaurants(conn):
    filename = "rostov_restaurants.csv"
    if not os.path.exists(filename):
        print(f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    with open(filename, "r", encoding="utf-8-sig") as f:
        sample = f.read(200)
        f.seek(0)
        first_line = f.readline().strip()
        f.seek(0)

        print(f"üîç –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ {filename}: {first_line}")

        reader = csv.DictReader(f)
        expected_fields = {"id", "name", "lat", "lon", "type", "cuisine", "price_level", "opening_hours", "website", "addr"}
        actual_fields = set(reader.fieldnames or [])
        if not expected_fields.issubset(actual_fields):
            print(f"‚ùå –û—à–∏–±–∫–∞: –≤ {filename} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω—É–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏.")
            print(f"–û–∂–∏–¥–∞–ª–∏—Å—å: {expected_fields}")
            print(f"–ü–æ–ª—É—á–µ–Ω—ã: {actual_fields}")
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ {filename}")

        cursor = conn.cursor()
        for row in reader:
            cursor.execute("""
                INSERT INTO restaurants (
                    id, name, lat, lon, type, cuisine,
                    price_level, opening_hours, website, addr
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                int(row["id"]),
                row["name"],
                float(row["lat"]),
                float(row["lon"]),
                clean_field(row["type"]),
                clean_field(row["cuisine"]),
                clean_field(row["price_level"]),
                clean_field(row["opening_hours"]),
                clean_field(row["website"]),
                clean_field(row["addr"])
            ))
    conn.commit()
    print("‚úÖ –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.")

def main():
    print("–°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö rostov_places.db...")
    conn = create_database()
    import_attractions(conn)
    import_restaurants(conn)
    conn.close()
    print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

if __name__ == "__main__":
    main()